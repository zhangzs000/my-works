js引擎

1、let/const和var有什么区别？

浏览器在加载了一段闭合的script标签后，会经历3个阶段：语法分析、预编译、执行。在创建执行上下文时（预编译）。let、const被绑定到了语法环境中，var被绑定到变量环境中。被绑定的地方不同，作用自然不同。

2、闭包
内部函数访问外部函数的局部变量，内部函数执行，--父级函数---形成闭包。函数执行时虽然父级函数的上下文栈被销毁了，但是依然会让父级上下文的活动对象(AO)在内存中。子函数依然可以通过作用域链访问到它。-----因为存在引用关系，所以不被gc（垃圾回收机制）回收-----。
2.1 点击列表的索引为什么都是最后一个索引？
因为全局执行上下文的VO（变量对象）里面的索引不变。添加上立即执行函数后，作用域链会多个匿名函数的AO（活动对象）。
2.2 解决方案
let使得for循环为块级作用域;
闭包，变量的按值传递会将变量i的值复制给实参num，在匿名函数的内部又创建了一个用于访问num的匿名函数，这样每个函数都有了一个num的副本，互不影响了。

3、变量的声明提前
在预编译阶段形成上下文时，arguments赋值，但变量并没有赋值还是undefined，只是初始化的值。只有代码执行时，才修改变量的值。

4、执行上下文
执行上下文定义了变量或函数有权访问的其它数据。{}.toString()报错，Object.prototype.toString.call({})和toString.call({})可以访问。说明后面2手动设置{}有权访问访问Object上的toString()方法。但是，{}表面上原型链有toString()却不能访问。
